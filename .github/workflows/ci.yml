---
name: CI

"on":
  pull_request:
    branches: [main]
    paths:
      - 'apps/**'
      - 'libs/**'
      - 'meta/adr/**'
      - '.github/workflows/ci.yml'
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - 'libs/**'
      - '.github/workflows/ci.yml'
  workflow_dispatch:
    inputs:
      app:
        description: 'Application to build and push to ECR'
        required: true
        type: choice
        options:
          - bronze-ingestion
          - mcp-server

permissions:
  id-token: write
  contents: read

jobs:
  check-adr-status:
    name: Check ADR Status
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check for un-accepted ADRs
        run: |
          echo "🔍 Checking ADR status in meta/adr/ directory..."
          
          # Check if ADR directory exists
          if [ ! -d "meta/adr" ]; then
            echo "✅ No ADR directory found, check passed"
            exit 0
          fi
          
          # Function to extract status from ADR file
          get_adr_status() {
            local file="$1"
            awk '/^---$/{flag++; next} flag==1 && /^status:/ {gsub(/^status: *"?/, ""); gsub(/"$/, ""); print; exit}' "$file"
          }
          
          # Track if any proposed ADRs are found
          found_proposed=false
          
          # Check all ADR files
          for adr_file in meta/adr/*.md; do
            if [[ -f "$adr_file" && "$(basename "$adr_file")" != "TEMPLATE.md" ]]; then
              filename=$(basename "$adr_file")
              status=$(get_adr_status "$adr_file")
              
              echo "📄 $filename: status='$status'"
              
              if [[ "$status" == "Proposed" ]]; then
                echo "❌ ERROR: Found ADR with 'Proposed' status: $filename"
                echo "   ADRs must be accepted before merging to main branch"
                found_proposed=true
              elif [[ "$status" == "Accepted" || "$status" == "Deprecated" || "$status" == "Superseded"* ]]; then
                echo "   ✅ Valid status"
              else
                echo "   ⚠️  Warning: Unknown status '$status' in $filename"
              fi
            fi
          done
          
          if [[ "$found_proposed" == "true" ]]; then
            echo
            echo "❌ CI FAILURE: Found ADRs with 'Proposed' status"
            echo "   Please use the 'Accept Proposed ADRs' workflow to accept them"
            echo "   or change their status to 'Accepted' before merging"
            exit 1
          else
            echo
            echo "✅ All ADRs have valid status - check passed"
          fi

  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      app-matrix: ${{ steps.dispatch-defaults.outputs.app-matrix || steps.changes.outputs.app-matrix }}
      lib-matrix: ${{ steps.dispatch-defaults.outputs.lib-matrix || steps.changes.outputs.lib-matrix }}
      has-app-changes: ${{ steps.dispatch-defaults.outputs.has-app-changes || steps.changes.outputs.has-app-changes }}
      has-lib-changes: ${{ steps.dispatch-defaults.outputs.has-lib-changes || steps.changes.outputs.has-lib-changes }}
    steps:
      - name: Set defaults for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        id: dispatch-defaults
        run: |
          echo "has-app-changes=true" >> $GITHUB_OUTPUT
          echo "app-matrix={\"include\":[{\"app\":\"${{ inputs.app }}\"}]}" >> $GITHUB_OUTPUT
          echo "has-lib-changes=false" >> $GITHUB_OUTPUT
          echo "lib-matrix={\"include\":[]}" >> $GITHUB_OUTPUT
          echo "Manual trigger for app: ${{ inputs.app }}"

      - name: Checkout code
        if: github.event_name != 'workflow_dispatch'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed apps and libraries
        if: github.event_name != 'workflow_dispatch'
        id: changes
        run: |
          set -eo pipefail
          echo "🔎 Determining changed paths for ${{ github.event_name }}..."

          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
            HEAD_SHA="${{ github.event.pull_request.head.sha }}"
          else
            BASE_SHA="${{ github.event.before }}"
            HEAD_SHA="${{ github.sha }}"
          fi

          echo "BASE_SHA=$BASE_SHA"
          echo "HEAD_SHA=$HEAD_SHA"

          if [ -z "$BASE_SHA" ] || echo "$BASE_SHA" | grep -q '^0\{40\}$'; then
            echo "⚠️  No valid BASE_SHA; using previous commit as base"
            BASE_SHA=$(git rev-parse HEAD~1 || true)
          fi

          if [ -z "$BASE_SHA" ]; then
            echo "⚠️  Treating as initial commit; listing files under apps/ and libs/"
            changed_app_files=$(git ls-files 'apps/*' | cut -d'/' -f2 | sort -u)
            changed_lib_files=$(git ls-files 'libs/*' | cut -d'/' -f2 | sort -u)
          else
            echo "🔁 Diffing changes between $BASE_SHA..$HEAD_SHA"
            changed_app_files=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | grep '^apps/' || true)
            changed_app_files=$(echo "$changed_app_files" | cut -d'/' -f2 | sort -u)
            changed_lib_files=$(git diff --name-only "$BASE_SHA" "$HEAD_SHA" | grep '^libs/' || true)
            changed_lib_files=$(echo "$changed_lib_files" | cut -d'/' -f2 | sort -u)
          fi

          # Process apps
          if [ -z "$changed_app_files" ]; then
            echo "has-app-changes=false" >> $GITHUB_OUTPUT
            echo "app-matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "No changes detected in apps directory"
          else
            echo "has-app-changes=true" >> $GITHUB_OUTPUT

            # Build matrix of changed apps
            app_matrix_items=""
            for app in $changed_app_files; do
              if [ -f "apps/$app/pyproject.toml" ]; then
                if [ -n "$app_matrix_items" ]; then
                  app_matrix_items="$app_matrix_items,"
                fi
                app_matrix_items="$app_matrix_items{\"app\":\"$app\"}"
              fi
            done

            if [ -n "$app_matrix_items" ]; then
              echo "app-matrix={\"include\":[$app_matrix_items]}" >> $GITHUB_OUTPUT
              echo "Found Python apps with changes: $changed_app_files"
            else
              echo "has-app-changes=false" >> $GITHUB_OUTPUT
              echo "app-matrix={\"include\":[]}" >> $GITHUB_OUTPUT
              echo "No Python apps with pyproject.toml found in changed dirs"
            fi
          fi

          # Process libraries
          if [ -z "$changed_lib_files" ]; then
            echo "has-lib-changes=false" >> $GITHUB_OUTPUT
            echo "lib-matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "No changes detected in libs directory"
          else
            echo "has-lib-changes=true" >> $GITHUB_OUTPUT

            # Build matrix of changed libraries
            lib_matrix_items=""
            for lib in $changed_lib_files; do
              if [ -f "libs/$lib/pyproject.toml" ]; then
                if [ -n "$lib_matrix_items" ]; then
                  lib_matrix_items="$lib_matrix_items,"
                fi
                lib_matrix_items="$lib_matrix_items{\"lib\":\"$lib\"}"
              fi
            done

            if [ -n "$lib_matrix_items" ]; then
              echo "lib-matrix={\"include\":[$lib_matrix_items]}" >> $GITHUB_OUTPUT
              echo "Found Python libraries with changes: $changed_lib_files"
            else
              echo "has-lib-changes=false" >> $GITHUB_OUTPUT
              echo "lib-matrix={\"include\":[]}" >> $GITHUB_OUTPUT
              echo "No Python libraries with pyproject.toml found in changed dirs"
            fi
          fi

  test-libraries:
    name: Test Libraries
    needs: detect-changes
    if: needs.detect-changes.outputs.has-lib-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.lib-matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: libs/${{ matrix.lib }}/.venv
          key: >-
            poetry-lib-${{ matrix.lib }}-${{ runner.os }}-
            ${{ hashFiles('libs/${{ matrix.lib }}/poetry.lock') }}
          restore-keys: |
            poetry-lib-${{ matrix.lib }}-${{ runner.os }}-

      - name: Install dependencies
        working-directory: libs/${{ matrix.lib }}
        run: poetry install

      - name: Format check
        working-directory: libs/${{ matrix.lib }}
        run: poetry run ruff format --check .

      - name: Lint
        working-directory: libs/${{ matrix.lib }}
        run: poetry run ruff check .

      - name: Test
        working-directory: libs/${{ matrix.lib }}
        run: poetry run pytest

      - name: Library validation
        working-directory: libs/${{ matrix.lib }}
        run: |
          echo "✅ Library ${{ matrix.lib }} passed all tests"
          echo "📦 Library is ready for use by applications"

  test-applications:
    name: Test Applications
    needs: detect-changes
    if: needs.detect-changes.outputs.has-app-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.app-matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Install dependencies
        working-directory: apps/${{ matrix.app }}
        run: poetry install

      - name: Format check
        working-directory: apps/${{ matrix.app }}
        run: poetry run ruff format --check .

      - name: Lint
        working-directory: apps/${{ matrix.app }}
        run: poetry run ruff check .

      - name: Test
        working-directory: apps/${{ matrix.app }}
        run: poetry run pytest

      - name: Check if app is deployable
        id: deployment-check
        working-directory: apps/${{ matrix.app }}
        run: |
          # Check if this app is intended for deployment
          # Deployable apps should have a Dockerfile
          if [ -f "Dockerfile" ]; then
            echo "deployable=true" >> $GITHUB_OUTPUT
            echo "🚢 Application ${{ matrix.app }} is deployable (has Dockerfile)"
          else
            # Check pyproject.toml for deployment markers
            if grep -q "deployable.*true" pyproject.toml 2>/dev/null; then
              echo "deployable=true" >> $GITHUB_OUTPUT
              echo "⚠️  Application ${{ matrix.app }} marked as deployable but missing Dockerfile"
            else
              echo "deployable=false" >> $GITHUB_OUTPUT
              echo "🛠️  Application ${{ matrix.app }} is a utility/tool (no Dockerfile required)"
            fi
          fi

      - name: Configure AWS credentials
        if: steps.deployment-check.outputs.deployable == 'true' && (github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/hoopstat-haus-operations
          role-session-name: GitHubActions-ECR-${{ github.run_id }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        if: steps.deployment-check.outputs.deployable == 'true' && (github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build Docker image
        if: steps.deployment-check.outputs.deployable == 'true'
        working-directory: apps/${{ matrix.app }}
        run: |
          if [ -f "Dockerfile" ]; then
            # Check if app uses local shared libraries
            if grep -q "path.*\\.\\./\\.\\./libs" pyproject.toml; then
              echo "📦 Application uses shared libraries, building from repository root"
              cd ../../
              docker build -f apps/${{ matrix.app }}/Dockerfile -t ${{ matrix.app }}:ci .
            else
              echo "📦 Building standalone application"
              docker build -t ${{ matrix.app }}:ci .
            fi
            echo "✅ Docker build successful for ${{ matrix.app }}"
          else
            echo "❌ Deployable application ${{ matrix.app }} is missing required Dockerfile"
            exit 1
          fi

      - name: Tag and push image to ECR
        if: steps.deployment-check.outputs.deployable == 'true' && (github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: hoopstat-haus/prod
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Tag image for ECR with multiple tags
          docker tag ${{ matrix.app }}:ci $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.app }}-$IMAGE_TAG
          docker tag ${{ matrix.app }}:ci $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.app }}-latest
          
          # Push all tags
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.app }}-$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.app }}-latest
          
          echo "✅ Successfully pushed ${{ matrix.app }} to ECR"
          echo "📍 Image: $ECR_REGISTRY/$ECR_REPOSITORY:${{ matrix.app }}-$IMAGE_TAG"

      - name: Application validation
        working-directory: apps/${{ matrix.app }}
        run: |
          echo "✅ Application ${{ matrix.app }} passed all tests"
          if [ "${{ steps.deployment-check.outputs.deployable }}" == "true" ]; then
            echo "🚢 Application is ready for deployment"
          else
            echo "🛠️  Utility/tool application validated successfully"
          fi

  test-integration:
    name: Test App-Library Integration
    needs: [detect-changes, test-libraries]
    if: needs.detect-changes.outputs.has-app-changes == 'true' && needs.detect-changes.outputs.has-lib-changes == 'true'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.app-matrix) }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Test app with updated libraries
        working-directory: apps/${{ matrix.app }}
        run: |
          echo "🔗 Testing integration between ${{ matrix.app }} and changed libraries"
          
          # Install app dependencies (including any local library dependencies)
          poetry install
          
          # Run tests to validate integration
          poetry run pytest
          
          echo "✅ Integration testing passed for ${{ matrix.app }}"
          echo "🔗 Application works correctly with updated shared libraries"

  test-e2e-pipeline:
    name: Test E2E Pipeline
    needs: [detect-changes, test-libraries]
    if: >
      (contains(needs.detect-changes.outputs.lib-matrix, 'hoopstat-e2e-testing') ||
       contains(needs.detect-changes.outputs.lib-matrix, 'hoopstat-mock-data') ||
       contains(needs.detect-changes.outputs.lib-matrix, 'hoopstat-data')) ||
      contains(github.event.pull_request.body, '[e2e]') ||
      github.event_name == 'push'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: latest
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Cache Poetry dependencies
        uses: actions/cache@v3
        with:
          path: libs/hoopstat-e2e-testing/.venv
          key: >-
            poetry-lib-hoopstat-e2e-testing-${{ runner.os }}-
            ${{ hashFiles('libs/hoopstat-e2e-testing/poetry.lock') }}
          restore-keys: |
            poetry-lib-hoopstat-e2e-testing-${{ runner.os }}-

      - name: Install E2E testing dependencies
        working-directory: libs/hoopstat-e2e-testing
        run: poetry install

      - name: Run E2E Pipeline Tests (Unit Mode)
        working-directory: libs/hoopstat-e2e-testing
        run: |
          echo "🚀 Running E2E pipeline tests with moto simulation"
          poetry run pytest tests/ -v --tb=short
          echo "✅ E2E pipeline tests passed"

      - name: E2E Testing Summary
        run: |
          echo "📋 E2E Testing Summary:"
          echo "   ✅ Unit tests with moto S3 simulation: PASSED"
          echo "   📦 Framework ready for local Docker testing"
          echo ""
          echo "🐳 For full integration testing with Localstack (local development):"
          echo "   docker compose -f docker-compose.test.yml up --build"
