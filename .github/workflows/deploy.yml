---
name: Deploy Applications

on:
  workflow_dispatch:
    inputs:
      application:
        description: 'Application to deploy'
        required: true
        type: choice
        options:
          - bronze-ingestion
          - mcp-server
      environment:
        description: 'Target environment'
        required: true
        default: 'prod'
        type: choice
        options:
          - prod
      image_tag:
        description: 'Image tag to deploy (defaults to latest)'
        required: false
        default: 'latest'
        type: string
  push:
    branches: [main]
    paths:
      - 'apps/**'
      - '.github/workflows/deploy.yml'

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: hoopstat-haus/prod

jobs:
  detect-deployable-apps:
    runs-on: ubuntu-latest
    outputs:
      app-matrix: ${{ steps.dispatch-defaults.outputs.app-matrix || steps.changes.outputs.app-matrix }}
      has-deployable-changes: ${{ steps.dispatch-defaults.outputs.has-deployable-changes || steps.changes.outputs.has-deployable-changes }}
    steps:
      - name: Set defaults for workflow_dispatch
        if: github.event_name == 'workflow_dispatch'
        id: dispatch-defaults
        run: |
          echo "has-deployable-changes=true" >> $GITHUB_OUTPUT
          echo "app-matrix={\"include\":[{\"app\":\"${{ inputs.application }}\"}]}" >> $GITHUB_OUTPUT

      - name: Checkout code
        if: github.event_name == 'push'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect deployable applications
        if: github.event_name == 'push'
        id: changes
        run: |
          # Get list of changed files in apps directory
          changed_app_files=$(git diff --name-only origin/main~1...HEAD | \
            grep '^apps/' | cut -d'/' -f2 | sort -u)

          if [ -z "$changed_app_files" ]; then
            echo "has-deployable-changes=false" >> $GITHUB_OUTPUT
            echo "app-matrix={\"include\":[]}" >> $GITHUB_OUTPUT
            echo "No changes detected in apps directory"
          else
            # Build matrix of changed deployable apps
            app_matrix_items=""
            found_deployable=false

            for app in $changed_app_files; do
              if [ -f "apps/$app/Dockerfile" ]; then
                if [ -n "$app_matrix_items" ]; then
                  app_matrix_items="$app_matrix_items,"
                fi
                app_matrix_items="$app_matrix_items{\"app\":\"$app\"}"
                found_deployable=true
                echo "üì¶ Found deployable app: $app"
              fi
            done

            if [ "$found_deployable" = "true" ]; then
              echo "has-deployable-changes=true" >> $GITHUB_OUTPUT
              echo "app-matrix={\"include\":[$app_matrix_items]}" >> $GITHUB_OUTPUT
              echo "Found deployable applications with changes"
            else
              echo "has-deployable-changes=false" >> $GITHUB_OUTPUT
              echo "app-matrix={\"include\":[]}" >> $GITHUB_OUTPUT
              echo "No deployable applications found in changed directories"
            fi
          fi

  deploy-application:
    name: Deploy ${{ matrix.app || inputs.application }}
    runs-on: ubuntu-latest
    needs: detect-deployable-apps
    if: |
      (github.event_name == 'push' && needs.detect-deployable-apps.outputs.has-deployable-changes == 'true') ||
      (github.event_name == 'workflow_dispatch' && needs.detect-deployable-apps.outputs.has-deployable-changes == 'true')
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-deployable-apps.outputs.app-matrix) }}

    steps:
      - name: Set deployment variables
        id: vars
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "app=${{ inputs.application }}" >> $GITHUB_OUTPUT
            echo "environment=${{ inputs.environment }}" >> $GITHUB_OUTPUT
            echo "image_tag=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "app=${{ matrix.app }}" >> $GITHUB_OUTPUT
            echo "environment=prod" >> $GITHUB_OUTPUT
            echo "image_tag=${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/hoopstat-haus-operations
          role-session-name: GitHubActions-Deploy-${{ github.run_id }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Install deployment dependencies
        run: |
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify image exists in ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_NAME: ${{ steps.vars.outputs.app }}
          IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
        run: |
          echo "üîç Checking if image exists in ECR..."

          # First try to find the specific image tag
          if aws ecr describe-images \
              --repository-name $ECR_REPOSITORY \
              --image-ids imageTag=$APP_NAME-$IMAGE_TAG \
              --region $AWS_REGION >/dev/null 2>&1; then
            echo "‚úÖ Image found: $ECR_REGISTRY/$ECR_REPOSITORY:$APP_NAME-$IMAGE_TAG"
            echo "FINAL_IMAGE_TAG=$APP_NAME-$IMAGE_TAG" >> $GITHUB_ENV
          else
            echo "‚ö†Ô∏è  Specific image not found: $ECR_REGISTRY/$ECR_REPOSITORY:$APP_NAME-$IMAGE_TAG"
            echo "üîç Checking for latest image..."
            
            # Fallback to latest tag
            if aws ecr describe-images \
                --repository-name $ECR_REPOSITORY \
                --image-ids imageTag=$APP_NAME-latest \
                --region $AWS_REGION >/dev/null 2>&1; then
              echo "‚úÖ Using latest image: $ECR_REGISTRY/$ECR_REPOSITORY:$APP_NAME-latest"
              echo "FINAL_IMAGE_TAG=$APP_NAME-latest" >> $GITHUB_ENV
            else
              echo "‚ùå No images found for $APP_NAME"
              echo "Available images for $APP_NAME:"
              # Use a more robust query that handles null imageTags and filters them out
              aws ecr describe-images \
                --repository-name $ECR_REPOSITORY \
                --query "imageDetails[?imageTags!=null].imageTags[?starts_with(@, '$APP_NAME-')]" \
                --output table 2>/dev/null || echo "No images found for $APP_NAME"
              exit 1
            fi
          fi

      - name: Pull and test image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          APP_NAME: ${{ steps.vars.outputs.app }}
        run: |
          echo "üì• Pulling image from ECR..."
          docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$FINAL_IMAGE_TAG

          echo "üß™ Testing image health..."
          
          # Check if this is a Lambda-based application by looking for the lambda entrypoint
          # Use --entrypoint to override the Lambda entrypoint for this check
          if docker run --rm --entrypoint sh $ECR_REGISTRY/$ECR_REPOSITORY:$FINAL_IMAGE_TAG \
              -c 'ls /lambda-entrypoint.sh 2>/dev/null || echo "not-lambda"' | grep -q "not-lambda"; then
            echo "üêç Regular Python application detected"
            # Run a basic health check for regular Python applications
            docker run --rm --name test-$APP_NAME \
              $ECR_REGISTRY/$ECR_REPOSITORY:$FINAL_IMAGE_TAG \
              python -c "
                try:
                    import app.main
                    print('Health check passed - app.main imported successfully')
                except Exception as e:
                    print(f'Health check failed: {e}')
                    exit(1)
              " || {
              echo "‚ùå Image health check failed"
              exit 1
            }
          else
            echo "üöÄ Lambda application detected"
            # For Lambda functions, test the handler import and basic functionality
            # Use --entrypoint to override the Lambda entrypoint for health checks
            docker run --rm --name test-$APP_NAME \
              --entrypoint python \
              $ECR_REGISTRY/$ECR_REPOSITORY:$FINAL_IMAGE_TAG \
              -c "
                try:
                    from app.lambda_handler import lambda_handler
                    # Check if lambda_handler is callable
                    if callable(lambda_handler):
                        print('Lambda handler health check passed - handler is importable and callable')
                    else:
                        print('Lambda handler is not callable')
                        exit(1)
                except ImportError as e:
                    print(f'Lambda handler import failed: {e}')
                    exit(1)
                except Exception as e:
                    print(f'Lambda handler health check failed: {e}')
                    exit(1)
              " || {
              echo "‚ùå Lambda handler health check failed"
              exit 1
            }
          fi

          echo "‚úÖ Image health check passed"

      - name: Deploy to AWS Lambda
        env:
          APP_NAME: ${{ steps.vars.outputs.app }}
          ENVIRONMENT: ${{ steps.vars.outputs.environment }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "üöÄ Deploying $APP_NAME to AWS Lambda in $ENVIRONMENT..."
          echo "üìç Image: $ECR_REGISTRY/$ECR_REPOSITORY:$FINAL_IMAGE_TAG"

          # Lambda function name follows the pattern: hoopstat-haus-{app-name}
          FUNCTION_NAME="hoopstat-haus-$APP_NAME"
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:$FINAL_IMAGE_TAG"

          echo "üîç Checking if Lambda function exists: $FUNCTION_NAME"

          # Check if Lambda function exists
          if aws lambda get-function \
              --function-name "$FUNCTION_NAME" \
              --region "$AWS_REGION" >/dev/null 2>&1; then

            echo "‚úÖ Lambda function exists, proceeding with update"
            echo "üîÑ Updating Lambda function: $FUNCTION_NAME"
            echo "üì¶ New image URI: $IMAGE_URI"

            # Update Lambda function code with new container image
            aws lambda update-function-code \
              --function-name "$FUNCTION_NAME" \
              --image-uri "$IMAGE_URI" \
              --region "$AWS_REGION" \
              --output json > lambda_update_result.json

            # Check if update was successful
            if [ $? -eq 0 ]; then
              echo "‚úÖ Lambda function code updated successfully"

              # Extract some information from the response
              LAST_MODIFIED=$(cat lambda_update_result.json | jq -r '.LastModified')
              CODE_SHA256=$(cat lambda_update_result.json | jq -r '.CodeSha256')
              FUNCTION_ARN=$(cat lambda_update_result.json | jq -r '.FunctionArn')

              echo "üìã Update Details:"
              echo "  Function ARN: $FUNCTION_ARN"
              echo "  Last Modified: $LAST_MODIFIED"
              echo "  Code SHA256: $CODE_SHA256"

              # Wait for function to be active
              echo "‚è≥ Waiting for function to become active..."
              aws lambda wait function-updated \
                --function-name "$FUNCTION_NAME" \
                --region "$AWS_REGION"

              if [ $? -eq 0 ]; then
                echo "‚úÖ Lambda function is now active and ready"

                # Optional: Run a test invocation for API service functions
                if [[ "$APP_NAME" == "mcp-server" ]]; then
                  echo "üß™ Running test invocation..."
                  TEST_PAYLOAD='{"test": true, "message": "deployment verification"}'

                  aws lambda invoke \
                    --function-name "$FUNCTION_NAME" \
                    --payload "$TEST_PAYLOAD" \
                    --region "$AWS_REGION" \
                    --log-type Tail \
                    test_response.json

                  if [ $? -eq 0 ]; then
                    echo "‚úÖ Test invocation successful"
                    echo "üìã Response:"
                    cat test_response.json | jq '.'
                  else
                    echo "‚ö†Ô∏è  Test invocation failed - function may need manual verification"
                  fi
                else
                  echo "‚ÑπÔ∏è  Skipping test invocation for data processing function"
                fi

              else
                echo "‚ùå Function update did not complete successfully"
                exit 1
              fi
            else
              echo "‚ùå Failed to update Lambda function code"
              cat lambda_update_result.json || echo "No response file created"
              exit 1
            fi

          else
            echo "‚ùå Lambda function does not exist: $FUNCTION_NAME"
            echo ""
            echo "üèóÔ∏è  Initial Lambda function deployment requires infrastructure setup:"
            echo "   1. Ensure Terraform infrastructure has been applied"
            echo "   2. Verify that the Lambda function is created with initial container image"
            echo "   3. Run this deployment workflow again"
            echo ""
            echo "üìã Expected Lambda function: arn:aws:lambda:$AWS_REGION:*:function:$FUNCTION_NAME"
            echo ""
            echo "üîß To deploy infrastructure:"
            echo "   cd infrastructure/"
            echo "   terraform init"
            echo "   terraform plan"
            echo "   terraform apply"
            echo ""
            echo "üìù Note: Initial Lambda function creation requires placeholder images in ECR."
            echo "   The infrastructure creates functions, then this workflow updates them."
            exit 1
          fi

      - name: Deployment summary
        env:
          APP_NAME: ${{ steps.vars.outputs.app }}
          ENVIRONMENT: ${{ steps.vars.outputs.environment }}
          IMAGE_TAG: ${{ steps.vars.outputs.image_tag }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "üìã Deployment Summary"
          echo "=================="
          echo "Application: $APP_NAME"
          echo "Environment: $ENVIRONMENT"
          echo "Requested Image Tag: $IMAGE_TAG"
          echo "Final Image Tag: $FINAL_IMAGE_TAG"
          echo "Final Image: $ECR_REGISTRY/$ECR_REPOSITORY:$FINAL_IMAGE_TAG"
          echo "Triggered by: ${{ github.event_name }}"
          echo "Status: ‚úÖ Success"

      - name: Cleanup temporary files
        if: always()
        run: |
          # Clean up any temporary files created during deployment
          rm -f lambda_update_result.json test_response.json